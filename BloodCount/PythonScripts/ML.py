# -*- coding: utf-8 -*-
"""Hakaton_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1taGaJbU8mBuKXfLSDuCdANvq_44sajI5
"""

import pickle
import os
import pandas as pd
import sys
import json

# Таблицы интерпретации для показателей
interpretation_tables = {
    "Эритроциты": {
        2: 'Уровень эритроцитов - {value} ×10х12/л, что ниже установленной нормы (эритропения); Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины снижения уровня эритроцитов требуется плановая консультация терапевта.',
        3: 'Уровень эритроцитов - {value} ×10х12/л, что соответствует норме.',
        4: 'Уровень эритроцитов - {value} ×10х12/л, что выше установленной нормы (эритроцитоз); Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины повышения уровня эритроцитов требуется плановая консультация терапевта.'
    },
    "Гемоглобин": {
        1: 'Уровень гемоглобина - {value} г/л, что является критическим отклонением от установленной нормы (анемия тяжелой степени). Расценивается как риск угрозы для жизни. Требуется экстренная консультация терапевта или гематолога/ вызов бригады скорой помощи.',
        2: 'Уровень гемоглобина - {value} г/л, что ниже установленной нормы (анемия). Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины развития анемии и назначения лечения требуется плановая консультация терапевта.',
        3: 'Уровень гемоглобина - {value} г/л, что соответствует норме.',
        4: 'Уровень гемоглобина - {value} г/л, что выше установленной нормы. Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины повышения гемоглобина (физиологические или патологические) и назначения лечения требуется плановая консультация терапевта.',
        5: 'Уровень гемоглобина - {value} г/л, что является критическим отклонением от установленной нормы. Расценивается как риск угрозы для жизни. Требуется экстренная консультация терапевта или гематолога/ вызов бригады скорой помощи.'
    },
    "Тромбоциты": {
        1: 'Уровень тромбоцитов - {value} ×10х9/л, что является критическим отклонением от установленной нормы (тромбоцитопения тяжелой степени). Расценивается как риск угрозы для жизни, риск кровотечения. Требуется экстренная консультация терапевта или гематолога/ вызов бригады скорой помощи.',
        2: 'Уровень тромбоцитов - {value} ×10х9/л, что ниже установленной нормы (тромбоцитопения). Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины снижения уровня тромбоцитов и назначения лечения требуется плановая консультация терапевта.',
        3: 'Уровень тромбоцитов - {value} ×10х9/л, что соответствует норме.',
        4: 'Уровень тромбоцитов - {value} ×10х9/л, что выше установленной нормы (тромбоцитоз). Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины повышения уровня тромбоцитов и назначения лечения требуется плановая консультация терапевта.',
        5: 'Уровень тромбоцитов - {value} ×10х9/л, что является критическим отклонением от установленной нормы (тромбоцитоз тяжелой степени). Расценивается как риск угрозы для жизни, риск тромбозов. Требуется экстренная консультация терапевта или гематолога/ вызов бригады скорой помощи.'
    },
    "Лейкоциты": {
        1: 'Уровень лейкоцитов - {value} ×10х9/л, что является критическим отклонением от установленной нормы (лейкопения). Расценивается как риск угрозы для жизни. Требуется экстренная консультация гематолога/ вызов бригады скорой помощи.',
        2: 'Уровень лейкоцитов - {value} ×10х9/л, что ниже установленной нормы (лейкоцитопения). Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины снижения уровня лейкоцитов и назначения лечения требуется плановая консультация терапевта или гематолога.',
        3: 'Уровень лейкоцитов - {value} ×10х9/л, что соответствует норме.',
        4: 'Уровень лейкоцитов - {value} ×10х9/л, что выше установленной нормы (лейкоцитоз). Данное состояние может быть проявлением серьезных заболеваний, для уточнения причины повышения уровня лейкоцитов и назначения лечения требуется плановая консультация терапевта.',
        5: 'Уровень лейкоцитов - {value} ×10х9/л, что является критическим отклонением от установленной нормы (гиперлейкоцитоз/лейкемоидная реакция). Расценивается как риск угрозы для жизни. Требуется экстренная консультация гематолога/ вызов бригады скорой помощи.'
    }
}

def load_model(file_path):
    """
    Загружает модель из файла .pkl.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Файл модели '{file_path}' не найден.")

    with open(file_path, 'rb') as file:
        try:
            model = pickle.load(file)
        except Exception as e:
            raise ValueError(f"Ошибка загрузки модели из '{file_path}': {e}")
    return model

def preprocess_input(input_data, feature):
    """
    Обрабатывает входные данные для конкретной модели.
    """
    if feature in input_data:
        return [[input_data[feature]]]
    return None

def predict_with_model(model, input_data):
    """
    Использует модель для предсказаний.
    """
    try:
        predictions = model.predict(input_data)
    except Exception as e:
        raise ValueError(f"Ошибка при предсказании: {e}")
    return predictions

def interpret_result(test_name, prediction, value):
    """
    Интерпретирует предсказание модели на основе таблицы интерпретации.
    :param test_name: Название теста (показателя).
    :param prediction: Результат предсказания.
    :param value: Значение показателя из анализа.
    :return: Текстовое описание.
    """
    if test_name in interpretation_tables:
        template = interpretation_tables[test_name].get(prediction, "Неизвестный уровень результата.")
        return template.format(value=value)
    else:
        return "Нет интерпретации для данного теста."

def main():
    """
    Основной процесс работы с моделями.
    """
    # Пути к моделям и их признаки
model_paths = {
    "GBT_HGB_men": {"path": sys.argv[2] +  "Hakaton_GBT_HGB_men.pkl", "feature": "Гемоглобин", "gender": "мужской"},
    "GBT_HGB_women": {"path": sys.argv[2] + "Hakaton_GBT_HGB_women.pkl", "feature": "Гемоглобин", "gender": "женский"},
    "GBT_ESR": {"path": sys.argv[2] + "Hakaton_GBT_ESR.pkl", "feature": "Эритроциты"},
    "GBT_PLT": {"path": sys.argv[2] + "Hakaton_GBT_PLT.pkl", "feature": "Тромбоциты"},
    "GBT_WBC": {"path": sys.argv[2] + "Hakaton_GBT_WBC.pkl", "feature": "Лейкоциты"},
}


# Входные данные
input_data = json.loads(sys.argv[1])

def main():
    if input_data["Пол"].lower() == "мужской":
        del model_paths["GBT_HGB_women"]
    else:
        del model_paths["GBT_HGB_men"]

    for model_name, model_info in model_paths.items():
        try:
            model_path = model_info["path"]
            feature = model_info["feature"]
            model = load_model(model_path)
            processed_data = preprocess_input(input_data, feature)
            if processed_data is None:
                continue
            prediction = predict_with_model(model, processed_data)

            # Интерпретация результата
            interpretation = interpret_result(feature, prediction[0], input_data[feature])
            print(f"Интерпретация для '{feature}': {interpretation}")

        except Exception as e:
            print(f"Ошибка при обработке модели '{model_name}': {e}")

if __name__ == "__main__":
    main()